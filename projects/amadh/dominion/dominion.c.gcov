        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    54435:    8:int compare(const void* a, const void* b) {
    54435:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
    54435:   11:    if (*(int*)a < *(int*)b)
    14516:   12:        return -1;
    39919:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   22:    int* k = malloc(10 * sizeof(int));
    #####:   23:    k[0] = k1;
    #####:   24:    k[1] = k2;
    #####:   25:    k[2] = k3;
    #####:   26:    k[3] = k4;
    #####:   27:    k[4] = k5;
    #####:   28:    k[5] = k6;
    #####:   29:    k[6] = k7;
    #####:   30:    k[7] = k8;
    #####:   31:    k[8] = k9;
    #####:   32:    k[9] = k10;
    #####:   33:    return k;
        -:   34:}
        -:   35:
     1200:   36:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   37:                   struct gameState *state) {
        -:   38:    
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:    //set up random number generator
     1200:   43:    SelectStream(1);
     1200:   44:    PutSeed((long)randomSeed);
        -:   45:    
        -:   46:    //check number of players
     1200:   47:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   48:    {
    #####:   49:        return -1;
        -:   50:    }
        -:   51:    
        -:   52:    //set number of players
     1200:   53:    state->numPlayers = numPlayers;
        -:   54:    
        -:   55:    //check selected kingdom cards are different
    13200:   56:    for (i = 0; i < 10; i++)
        -:   57:    {
   132000:   58:        for (j = 0; j < 10; j++)
        -:   59:        {
   120000:   60:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   61:            {
    #####:   62:                return -1;
        -:   63:            }
        -:   64:        }
        -:   65:    }
        -:   66:    
        -:   67:    
        -:   68:    //initialize supply
        -:   69:    ///////////////////////////////
        -:   70:    
        -:   71:    //set number of Curse cards
     1200:   72:    if (numPlayers == 2)
        -:   73:    {
      406:   74:        state->supplyCount[curse] = 10;
        -:   75:    }
      794:   76:    else if (numPlayers == 3)
        -:   77:    {
      359:   78:        state->supplyCount[curse] = 20;
        -:   79:    }
        -:   80:    else
        -:   81:    {
      435:   82:        state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:    
        -:   85:    //set number of Victory cards
     1200:   86:    if (numPlayers == 2)
        -:   87:    {
      406:   88:        state->supplyCount[estate] = 8;
      406:   89:        state->supplyCount[duchy] = 8;
      406:   90:        state->supplyCount[province] = 8;
        -:   91:    }
        -:   92:    else
        -:   93:    {
      794:   94:        state->supplyCount[estate] = 12;
      794:   95:        state->supplyCount[duchy] = 12;
      794:   96:        state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:    
        -:   99:    //set number of Treasure cards
     1200:  100:    state->supplyCount[copper] = 60 - (7 * numPlayers);
     1200:  101:    state->supplyCount[silver] = 40;
     1200:  102:    state->supplyCount[gold] = 30;
        -:  103:    
        -:  104:    //set number of Kingdom cards
    25200:  105:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  106:    {
   198000:  107:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  108:        {
   186000:  109:            if (kingdomCards[j] == i)
        -:  110:            {
        -:  111:                //check if card is a 'Victory' Kingdom card
    12000:  112:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:                {
     2400:  114:                    if (numPlayers == 2){
      406:  115:                        state->supplyCount[i] = 8;
        -:  116:                    }
      794:  117:                    else{ state->supplyCount[i] = 12; }
        -:  118:                }
        -:  119:                else
        -:  120:                {
    10800:  121:                    state->supplyCount[i] = 10;
        -:  122:                }
    12000:  123:                break;
        -:  124:            }
        -:  125:            else    //card is not in the set choosen for the game
        -:  126:            {
   174000:  127:                state->supplyCount[i] = -1;
        -:  128:            }
        -:  129:        }
        -:  130:        
        -:  131:    }
        -:  132:    
        -:  133:    ////////////////////////
        -:  134:    //supply intilization complete
        -:  135:    
        -:  136:    //set player decks
     4829:  137:    for (i = 0; i < numPlayers; i++)
        -:  138:    {
     3629:  139:        state->deckCount[i] = 0;
    14516:  140:        for (j = 0; j < 3; j++)
        -:  141:        {
    10887:  142:            state->deck[i][j] = estate;
    10887:  143:            state->deckCount[i]++;
        -:  144:        }
    29032:  145:        for (j = 3; j < 10; j++)
        -:  146:        {
    25403:  147:            state->deck[i][j] = copper;
    25403:  148:            state->deckCount[i]++;
        -:  149:        }
        -:  150:    }
        -:  151:    
        -:  152:    //shuffle player decks
     4829:  153:    for (i = 0; i < numPlayers; i++)
        -:  154:    {
     3629:  155:        if ( shuffle(i, state) < 0 )
        -:  156:        {
    #####:  157:            return -1;
        -:  158:        }
        -:  159:    }
        -:  160:    
        -:  161:    //draw player hands
     4829:  162:    for (i = 0; i < numPlayers; i++)
        -:  163:    {
        -:  164:        //initialize hand size to zero
     3629:  165:        state->handCount[i] = 0;
     3629:  166:        state->discardCount[i] = 0;
        -:  167:        //draw 5 cards
        -:  168:        // for (j = 0; j < 5; j++)
        -:  169:        //	{
        -:  170:        //	  drawCard(i, state);
        -:  171:        //	}
        -:  172:    }
        -:  173:    
        -:  174:    //set embargo tokens to 0 for all supply piles
    33600:  175:    for (i = 0; i <= treasure_map; i++)
        -:  176:    {
    32400:  177:        state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:    
        -:  180:    //initialize first player's turn
     1200:  181:    state->outpostPlayed = 0;
     1200:  182:    state->phase = 0;
     1200:  183:    state->numActions = 1;
     1200:  184:    state->numBuys = 1;
     1200:  185:    state->playedCardCount = 0;
     1200:  186:    state->whoseTurn = 0;
     1200:  187:    state->handCount[state->whoseTurn] = 0;
        -:  188:    //int it; move to top
        -:  189:    
        -:  190:    //Moved draw cards to here, only drawing at the start of a turn
     7200:  191:    for (it = 0; it < 5; it++){
     6000:  192:        drawCard(state->whoseTurn, state);
        -:  193:    }
        -:  194:    
     1200:  195:    updateCoins(state->whoseTurn, state, 0);
        -:  196:    
     1200:  197:    return 0;
        -:  198:}
        -:  199:
     3629:  200:int shuffle(int player, struct gameState *state) {
        -:  201:        
        -:  202:    int newDeck[MAX_DECK];
     3629:  203:    int newDeckPos = 0;
        -:  204:    int card;
        -:  205:    int i;
        -:  206:    
     3629:  207:    if (state->deckCount[player] < 1)
    #####:  208:        return -1;
     3629:  209:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  210:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  211:    
    43548:  212:    while (state->deckCount[player] > 0) {
    36290:  213:        card = floor(Random() * state->deckCount[player]);
    36290:  214:        newDeck[newDeckPos] = state->deck[player][card];
    36290:  215:        newDeckPos++;
   123491:  216:        for (i = card; i < state->deckCount[player]-1; i++) {
    87201:  217:            state->deck[player][i] = state->deck[player][i+1];
        -:  218:        }
    36290:  219:        state->deckCount[player]--;
        -:  220:    }
    39919:  221:    for (i = 0; i < newDeckPos; i++) {
    36290:  222:        state->deck[player][i] = newDeck[i];
    36290:  223:        state->deckCount[player]++;
        -:  224:    }
        -:  225:    
     3629:  226:    return 0;
        -:  227:}
        -:  228:
    #####:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  230:{
        -:  231:    int card;
    #####:  232:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:    
        -:  234:    //check if it is the right phase
    #####:  235:    if (state->phase != 0)
        -:  236:    {
    #####:  237:	printf("State->phase != 0\n");
    #####:  238:        return -1;
        -:  239:    }
        -:  240:    
        -:  241:    //check if player has enough actions
    #####:  242:    if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:	printf("State->numActions < 1\n");
    #####:  245:        return -1;
        -:  246:    }
        -:  247:    
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:    
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:	printf("card < adventurer || card > treasure_map\n");
    #####:  255:        return -1;
        -:  256:    }
        -:  257:    
        -:  258:    //play card
    #####:  259:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:	printf("Card effect < 0\n");
    #####:  262:        return -1;
        -:  263:    }
        -:  264:   
        -:  265:     
    #####:  266:    printf("Card effect >= 0\n");
        -:  267:    //reduce number of actions
    #####:  268:    state->numActions--;
        -:  269:    
        -:  270:    //update coins (Treasure cards may be added with card draws)
    #####:  271:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:    
    #####:  273:    return 0;
        -:  274:}
        -:  275:
    #####:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:    int who;
        -:  278:    if (DEBUG){
        -:  279:        printf("Entering buyCard...\n");
        -:  280:    }
        -:  281:    
        -:  282:    // I don't know what to do about the phase thing.
        -:  283:    
    #####:  284:    who = state->whoseTurn;
        -:  285:    
    #####:  286:    if (state->numBuys < 1){
        -:  287:        if (DEBUG)
        -:  288:            printf("You do not have any buys left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (supplyCount(supplyPos, state) <1){
        -:  291:        if (DEBUG)
        -:  292:            printf("There are not any of that type of card left\n");
    #####:  293:        return -1;
    #####:  294:    } else if (state->coins < getCost(supplyPos)){
        -:  295:        if (DEBUG)
        -:  296:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:        return -1;
        -:  298:    } else {
    #####:  299:        state->phase=1;
        -:  300:        //state->supplyCount[supplyPos]--;
    #####:  301:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:        
    #####:  303:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  304:        state->numBuys--;
        -:  305:        if (DEBUG)
        -:  306:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:    }
        -:  308:    
        -:  309:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:    //state->discardCount[who]++;
        -:  311:    
    #####:  312:    return 0;
        -:  313:}
        -:  314:
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:    return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
    #####:  319:int handCard(int handPos, struct gameState *state) {
    #####:  320:    int currentPlayer = whoseTurn(state);
    #####:  321:    return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
    #####:  324:int supplyCount(int card, struct gameState *state) {
    #####:  325:    return state->supplyCount[card];
        -:  326:}
        -:  327:
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:    int i;
    #####:  330:    int count = 0;
        -:  331:    
    #####:  332:    for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
    #####:  334:        if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:    
    #####:  337:    for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
    #####:  339:        if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:    
    #####:  342:    for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:        if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:    
    #####:  347:    return count;
        -:  348:}
        -:  349:
     1200:  350:int whoseTurn(struct gameState *state) {
     1200:  351:    return state->whoseTurn;
        -:  352:}
        -:  353:
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:    int k;
        -:  356:    int i;
    #####:  357:    int currentPlayer = whoseTurn(state);
        -:  358:    
        -:  359:    //Discard hand
    #####:  360:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  361:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:    }
    #####:  364:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:    //Code for determining the player
    #####:  367:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  368:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:    }
        -:  370:    else{
    #####:  371:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:    }
        -:  373:    
    #####:  374:    state->outpostPlayed = 0;
    #####:  375:    state->phase = 0;
    #####:  376:    state->numActions = 1;
    #####:  377:    state->coins = 0;
    #####:  378:    state->numBuys = 1;
    #####:  379:    state->playedCardCount = 0;
    #####:  380:    state->handCount[state->whoseTurn] = 0;
        -:  381:    
        -:  382:    //int k; move to top
        -:  383:    //Next player draws hand
    #####:  384:    for (k = 0; k < 5; k++){
    #####:  385:        drawCard(state->whoseTurn, state);//Draw a card
        -:  386:    }
        -:  387:    
        -:  388:    //Update money
    #####:  389:    updateCoins(state->whoseTurn, state , 0);
        -:  390:    
    #####:  391:    return 0;
        -:  392:}
        -:  393:
    #####:  394:int isGameOver(struct gameState *state) {
        -:  395:    int i;
        -:  396:    int j;
        -:  397:    
        -:  398:    //if stack of Province cards is empty, the game ends
    #####:  399:    if (state->supplyCount[province] == 0)
        -:  400:    {
    #####:  401:        return 1;
        -:  402:    }
        -:  403:    
        -:  404:    //if three supply pile are at 0, the game ends
    #####:  405:    j = 0;
    #####:  406:    for (i = 0; i < 25; i++)
        -:  407:    {
    #####:  408:        if (state->supplyCount[i] == 0)
        -:  409:        {
    #####:  410:            j++;
        -:  411:        }
        -:  412:    }
    #####:  413:    if ( j >= 3)
        -:  414:    {
    #####:  415:        return 1;
        -:  416:    }
        -:  417:    
    #####:  418:    return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:    
        -:  423:    int i;
    #####:  424:    int score = 0;
        -:  425:    //score from hand
    #####:  426:    for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:    
        -:  436:    //score from discard
    #####:  437:    for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:    
        -:  447:    //score from deck
    #####:  448:    for (i = 0; i < state->deckCount[player]; i++)
        -:  449:    {
    #####:  450:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:    
    #####:  458:    return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:    int i;
        -:  463:    int j;
        -:  464:    int highScore;
        -:  465:    int currentPlayer;
        -:  466:    
        -:  467:    //get score for each player
    #####:  468:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:        //set unused player scores to -9999
    #####:  471:        if (i >= state->numPlayers)
        -:  472:        {
    #####:  473:            players[i] = -9999;
        -:  474:        }
        -:  475:        else
        -:  476:        {
    #####:  477:            players[i] = scoreFor (i, state);
        -:  478:        }
        -:  479:    }
        -:  480:    
        -:  481:    //find highest score
    #####:  482:    j = 0;
    #####:  483:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:        if (players[i] > players[j])
        -:  486:        {
    #####:  487:            j = i;
        -:  488:        }
        -:  489:    }
    #####:  490:    highScore = players[j];
        -:  491:    
        -:  492:    //add 1 to players who had less turns
    #####:  493:    currentPlayer = whoseTurn(state);
    #####:  494:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:        if ( players[i] == highScore && i > currentPlayer )
        -:  497:        {
    #####:  498:            players[i]++;
        -:  499:        }
        -:  500:    }
        -:  501:    
        -:  502:    //find new highest score
    #####:  503:    j = 0;
    #####:  504:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:        if ( players[i] > players[j] )
        -:  507:        {
    #####:  508:            j = i;
        -:  509:        }
        -:  510:    }
    #####:  511:    highScore = players[j];
        -:  512:    
        -:  513:    //set winners in array to 1 and rest to 0
    #####:  514:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:        if ( players[i] == highScore )
        -:  517:        {
    #####:  518:            players[i] = 1;
        -:  519:        }
        -:  520:        else
        -:  521:        {
    #####:  522:            players[i] = 0;
        -:  523:        }
        -:  524:    }
        -:  525:    
    #####:  526:    return 0;
        -:  527:}
        -:  528:
     7361:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:    int deckCounter;
     7361:  532:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:        
        -:  534:        //Step 1 Shuffle the discard pile back into a deck
        -:  535:        int i;
        -:  536:        //Move discard to deck
    #####:  537:        for (i = 0; i < state->discardCount[player];i++){
    #####:  538:            state->deck[player][i] = state->discard[player][i];
    #####:  539:            state->discard[player][i] = -1;
        -:  540:        }
        -:  541:        
    #####:  542:        state->deckCount[player] = state->discardCount[player];
    #####:  543:        state->discardCount[player] = 0;//Reset discard
        -:  544:        
        -:  545:        //Shufffle the deck
    #####:  546:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:        
        -:  548:        if (DEBUG){//Debug statements
        -:  549:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:        }
        -:  551:        
    #####:  552:        state->discardCount[player] = 0;
        -:  553:        
        -:  554:        //Step 2 Draw Card
    #####:  555:        count = state->handCount[player];//Get current player's hand count
        -:  556:        
        -:  557:        if (DEBUG){//Debug statements
        -:  558:            printf("Current hand count: %d\n", count);
        -:  559:        }
        -:  560:        
    #####:  561:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:        
    #####:  563:        if (deckCounter == 0)
    #####:  564:            return -1;
        -:  565:        
    #####:  566:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  567:        state->deckCount[player]--;
    #####:  568:        state->handCount[player]++;//Increment hand count
        -:  569:    }
        -:  570:    
        -:  571:    else{
     7361:  572:        int count = state->handCount[player];//Get current hand count for player
        -:  573:        int deckCounter;
        -:  574:        if (DEBUG){//Debug statements
        -:  575:            printf("Current hand count: %d\n", count);
        -:  576:        }
        -:  577:        
     7361:  578:        deckCounter = state->deckCount[player];//Create holder for the deck count
     7361:  579:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7361:  580:        state->deckCount[player]--;
     7361:  581:        state->handCount[player]++;//Increment hand count
        -:  582:    }
        -:  583:    
     7361:  584:    return 0;
        -:  585:}
        -:  586:
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:    switch( cardNumber )
        -:  590:    {
        -:  591:        case curse:
    #####:  592:            return 0;
        -:  593:        case estate:
    #####:  594:            return 2;
        -:  595:        case duchy:
    #####:  596:            return 5;
        -:  597:        case province:
    #####:  598:            return 8;
        -:  599:        case copper:
    #####:  600:            return 0;
        -:  601:        case silver:
    #####:  602:            return 3;
        -:  603:        case gold:
    #####:  604:            return 6;
        -:  605:        case adventurer:
    #####:  606:            return 6;
        -:  607:        case council_room:
    #####:  608:            return 5;
        -:  609:        case feast:
    #####:  610:            return 4;
        -:  611:        case gardens:
    #####:  612:            return 4;
        -:  613:        case mine:
    #####:  614:            return 5;
        -:  615:        case remodel:
    #####:  616:            return 4;
        -:  617:        case smithy:
    #####:  618:            return 4;
        -:  619:        case village:
    #####:  620:            return 3;
        -:  621:        case baron:
    #####:  622:            return 4;
        -:  623:        case great_hall:
    #####:  624:            return 3;
        -:  625:        case minion:
    #####:  626:            return 5;
        -:  627:        case steward:
    #####:  628:            return 3;
        -:  629:        case tribute:
    #####:  630:            return 5;
        -:  631:        case ambassador:
    #####:  632:            return 3;
        -:  633:        case cutpurse:
    #####:  634:            return 4;
        -:  635:        case embargo:
    #####:  636:            return 2;
        -:  637:        case outpost:
    #####:  638:            return 5;
        -:  639:        case salvager:
    #####:  640:            return 4;
        -:  641:        case sea_hag:
    #####:  642:            return 4;
        -:  643:        case treasure_map:
    #####:  644:            return 4;
        -:  645:    }
        -:  646:    
    #####:  647:    return -1;
        -:  648:}
        -:  649:
        -:  650:
    #####:  651:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:  652:{
        -:  653:    int i;
        -:  654:    //+4 Cards
    #####:  655:    for (i = 0; i < 4; i++)
        -:  656:    {
    #####:  657:        drawCard(currentPlayer, state);
        -:  658:    }
        -:  659:    
        -:  660:    //+1 Buy
        -:  661:    //Commenting out this next line is meant to be a bug 
        -:  662:    //state->numBuys++;
        -:  663:    
        -:  664:    //Each other player draws a card
    #####:  665:    for (i = 0; i < state->numPlayers; i++)
        -:  666:    {
    #####:  667:        if ( i != currentPlayer )
        -:  668:        {
    #####:  669:            drawCard(i, state);
        -:  670:        }
        -:  671:    }
        -:  672:    
        -:  673:    //put played card in played card pile
    #####:  674:    discardCard(handPos, currentPlayer, state, 0);
        -:  675:    
    #####:  676:    return 0;
        -:  677:    
        -:  678:}
        -:  679:
    #####:  680:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:  681:{
        -:  682:    int i;
        -:  683:    //+3 Cards
        -:  684:    //I introduced a bug here by changing "i < 3" to "i < 2"
    #####:  685:    for (i = 0; i < 3; i++)
        -:  686:    {
    #####:  687:        drawCard(currentPlayer, state);
        -:  688:    }
        -:  689:
        -:  690:    //discard card from hand
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
    #####:  692:    return 0;
        -:  693:}
        -:  694:
     1000:  695:int play_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  696:{
        -:  697:    //+1 Card
     1000:  698:    drawCard(currentPlayer, state);
        -:  699:    
        -:  700:    //+1 Actions
        -:  701:    //Commenting out this next line is meant to be a bug
     1000:  702:    state->numActions++;
        -:  703:    
        -:  704:    //discard card from hand
     1000:  705:    discardCard(handPos, currentPlayer, state, 0);
     1000:  706:    return 0;
        -:  707:}
        -:  708:
      100:  709:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  710:{
        -:  711:    //+1 Card
      100:  712:    drawCard(currentPlayer, state);
        -:  713:    
        -:  714:    //+2 Actions
      100:  715:    state->numActions = state->numActions + 2;
        -:  716:    
        -:  717:    //discard played card from hand
      100:  718:    discardCard(handPos, currentPlayer, state, 0);
      100:  719:    return 0;
        -:  720:}
        -:  721:
      100:  722:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand, int z)
        -:  723:{
      461:  724:    while(drawntreasure<2)
        -:  725:    {
      261:  726:        if (state->deckCount[currentPlayer] <1)
        -:  727:        {
        -:  728:            //if the deck is empty we need to shuffle discard and add to deck
    #####:  729:            shuffle(currentPlayer, state);
        -:  730:        }
        -:  731:        
      261:  732:        drawCard(currentPlayer, state);
      261:  733:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  734:        
      261:  735:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  736:        {
      200:  737:            drawntreasure++;
        -:  738:        }
        -:  739:        else
        -:  740:        {
       61:  741:            temphand[z]=cardDrawn;
        -:  742:            //I removed this next line to introduce a bug for assignment 2
       61:  743:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       61:  744:            z++;
        -:  745:        }
        -:  746:    }
      261:  747:    while(z-1>=0)
        -:  748:    {
       61:  749:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       61:  750:        z=z-1;
        -:  751:    }
      100:  752:    return 0;
        -:  753:    
        -:  754:    
        -:  755:}
        -:  756:
     1200:  757:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  758:{
        -:  759:    int i;
        -:  760:    int j;
        -:  761:    int k;
        -:  762:    int x;
        -:  763:    int index;
     1200:  764:    int currentPlayer = whoseTurn(state);
     1200:  765:    int nextPlayer = currentPlayer + 1;
        -:  766:    
     1200:  767:    int tributeRevealedCards[2] = {-1, -1};
        -:  768:    int temphand[MAX_HAND];// moved above the if statement
     1200:  769:    int drawntreasure=0;
        -:  770:    int cardDrawn;
     1200:  771:    int z = 0;// this is the counter for the temp hand
     1200:  772:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  773:        nextPlayer = 0;
        -:  774:    }
        -:  775:    
        -:  776:    
        -:  777:    //uses switch to select card and perform actions
     1200:  778:    switch( card )
        -:  779:    {
        -:  780:        case adventurer:
      100:  781:		return play_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  782:            
        -:  783:        case council_room:
    #####:  784:           	printf("Playing Council Room\n");
    #####:  785:            return play_council_room(currentPlayer, state, handPos);
        -:  786:            
        -:  787:            
        -:  788:        case feast:
        -:  789:            
    #####:  790:           printf("Playing Feast\n");
        -:  791:            //gain card with cost up to 5
        -:  792:            //Backup hand
    #####:  793:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  794:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  795:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  796:            }
        -:  797:            //Backup hand
        -:  798:            
        -:  799:            //Update Coins for Buy
    #####:  800:            updateCoins(currentPlayer, state, 5);
    #####:  801:            x = 1;//Condition to loop on
    #####:  802:            while( x == 1) {//Buy one card
    #####:  803:                if (supplyCount(choice1, state) <= 0){
        -:  804:                    if (DEBUG)
        -:  805:                        printf("None of that card left, sorry!\n");
        -:  806:                    
        -:  807:                    if (DEBUG){
        -:  808:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  809:                    }
        -:  810:                }
    #####:  811:                else if (state->coins < getCost(choice1)){
    #####:  812:                    printf("That card is too expensive!\n");
        -:  813:                    
        -:  814:                    if (DEBUG){
        -:  815:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  816:                    }
        -:  817:                }
        -:  818:                else{
        -:  819:                    
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  822:                    }
        -:  823:                    
    #####:  824:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  825:                    x = 0;//No more buying cards
        -:  826:                    
        -:  827:                    if (DEBUG){
        -:  828:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:                    }
        -:  830:                    
        -:  831:                }
        -:  832:            }
        -:  833:            
        -:  834:            //Reset Hand
    #####:  835:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  836:                state->hand[currentPlayer][i] = temphand[i];
    #####:  837:                temphand[i] = -1;
        -:  838:            }
        -:  839:            //Reset Hand
        -:  840:            
    #####:  841:            return 0;
        -:  842:            
        -:  843:        case gardens:
        -:  844:		
    #####:  845:           printf("Playing Gardens\n");
    #####:  846:            return -1;
        -:  847:            
        -:  848:        case mine:
        -:  849:	
    #####:  850:           printf("Playing Mine\n");
    #####:  851:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  852:            
    #####:  853:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  854:            {
    #####:  855:                return -1;
        -:  856:            }
        -:  857:            
    #####:  858:            if (choice2 > treasure_map || choice2 < curse)
        -:  859:            {
    #####:  860:                return -1;
        -:  861:            }
        -:  862:            
    #####:  863:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  864:            {
    #####:  865:                return -1;
        -:  866:            }
        -:  867:            
    #####:  868:            gainCard(choice2, state, 2, currentPlayer);
        -:  869:            
        -:  870:            //discard card from hand
    #####:  871:            discardCard(handPos, currentPlayer, state, 0);
        -:  872:            
        -:  873:            //discard trashed card
    #####:  874:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:            {
    #####:  876:                if (state->hand[currentPlayer][i] == j)
        -:  877:                {
    #####:  878:                    discardCard(i, currentPlayer, state, 0);
    #####:  879:                    break;
        -:  880:                }
        -:  881:            }
        -:  882:            
    #####:  883:            return 0;
        -:  884:            
        -:  885:        case remodel:
        -:  886:	
    #####:  887:           printf("Playing Remodel\n");
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:            
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:            
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:            
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:            
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:            
        -:  910:            
    #####:  911:            return 0;
        -:  912:            
        -:  913:        case smithy:
    #####:  914:            return play_smithy(currentPlayer, state, handPos);
        -:  915:            
        -:  916:        case village:
        -:  917:            
      100:  918:            return play_village(currentPlayer, state, handPos);
        -:  919:           
        -:  920:            
        -:  921:        case baron:
    #####:  922:            state->numBuys++;//Increase buys by 1!
    #####:  923:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  924:                int p = 0;//Iterator for hand!
    #####:  925:                int card_not_discarded = 1;//Flag for discard set!
    #####:  926:                while(card_not_discarded){
    #####:  927:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  928:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  929:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  930:                        state->discardCount[currentPlayer]++;
    #####:  931:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  932:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  933:                        }
    #####:  934:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  935:                        state->handCount[currentPlayer]--;
    #####:  936:                        card_not_discarded = 0;//Exit the loop
        -:  937:                    }
    #####:  938:                    else if (p > state->handCount[currentPlayer]){
        -:  939:                        if(DEBUG) {
        -:  940:                            printf("No estate cards in your hand, invalid choice\n");
        -:  941:                            printf("Must gain an estate if there are any\n");
        -:  942:                        }
    #####:  943:                        if (supplyCount(estate, state) > 0){
    #####:  944:                            gainCard(estate, state, 0, currentPlayer);
    #####:  945:                            state->supplyCount[estate]--;//Decrement estates
    #####:  946:                            if (supplyCount(estate, state) == 0){
    #####:  947:                                isGameOver(state);
        -:  948:                            }
        -:  949:                        }
    #####:  950:                        card_not_discarded = 0;//Exit the loop
        -:  951:                    }
        -:  952:                    
        -:  953:                    else{
    #####:  954:                        p++;//Next card
        -:  955:                    }
        -:  956:                }
        -:  957:            }
        -:  958:            
        -:  959:            else{
    #####:  960:                if (supplyCount(estate, state) > 0){
    #####:  961:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  962:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  963:                    if (supplyCount(estate, state) == 0){
    #####:  964:                        isGameOver(state);
        -:  965:                    }
        -:  966:                }
        -:  967:            }
        -:  968:            
        -:  969:            
    #####:  970:            return 0;
        -:  971:            
        -:  972:        case great_hall:
     1000:  973:            return play_great_hall(currentPlayer, state, handPos);
        -:  974:            
        -:  975:        case minion:
        -:  976:            //+1 action
    #####:  977:            state->numActions++;
        -:  978:            
        -:  979:            //discard card from hand
    #####:  980:            discardCard(handPos, currentPlayer, state, 0);
        -:  981:            
    #####:  982:            if (choice1)		//+2 coins
        -:  983:            {
    #####:  984:                state->coins = state->coins + 2;
        -:  985:            }
        -:  986:            
    #####:  987:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  988:            {
        -:  989:                //discard hand
    #####:  990:                while(numHandCards(state) > 0)
        -:  991:                {
    #####:  992:                    discardCard(handPos, currentPlayer, state, 0);
        -:  993:                }
        -:  994:                
        -:  995:                //draw 4
    #####:  996:                for (i = 0; i < 4; i++)
        -:  997:                {
    #####:  998:                    drawCard(currentPlayer, state);
        -:  999:                }
        -: 1000:                
        -: 1001:                //other players discard hand and redraw if hand size > 4
    #####: 1002:                for (i = 0; i < state->numPlayers; i++)
        -: 1003:                {
    #####: 1004:                    if (i != currentPlayer)
        -: 1005:                    {
    #####: 1006:                        if ( state->handCount[i] > 4 )
        -: 1007:                        {
        -: 1008:                            //discard hand
    #####: 1009:                            while( state->handCount[i] > 0 )
        -: 1010:                            {
    #####: 1011:                                discardCard(handPos, i, state, 0);
        -: 1012:                            }
        -: 1013:                            
        -: 1014:                            //draw 4
    #####: 1015:                            for (j = 0; j < 4; j++)
        -: 1016:                            {
    #####: 1017:                                drawCard(i, state);
        -: 1018:                            }
        -: 1019:                        }
        -: 1020:                    }
        -: 1021:                }
        -: 1022:                
        -: 1023:            }
    #####: 1024:            return 0;
        -: 1025:            
        -: 1026:        case steward:
    #####: 1027:            if (choice1 == 1)
        -: 1028:            {
        -: 1029:                //+2 cards
    #####: 1030:                drawCard(currentPlayer, state);
    #####: 1031:                drawCard(currentPlayer, state);
        -: 1032:            }
    #####: 1033:            else if (choice1 == 2)
        -: 1034:            {
        -: 1035:                //+2 coins
    #####: 1036:                state->coins = state->coins + 2;
        -: 1037:            }
        -: 1038:            else
        -: 1039:            {
        -: 1040:                //trash 2 cards in hand
    #####: 1041:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1042:                discardCard(choice3, currentPlayer, state, 1);
        -: 1043:            }
        -: 1044:            
        -: 1045:            //discard card from hand
    #####: 1046:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1047:            return 0;
        -: 1048:            
        -: 1049:        case tribute:
        -: 1050:	
    #####: 1051:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1052:                if (state->deckCount[nextPlayer] > 0){
    #####: 1053:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:                    state->deckCount[nextPlayer]--;
        -: 1055:                }
    #####: 1056:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1057:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1058:                    state->discardCount[nextPlayer]--;
        -: 1059:                }
        -: 1060:                else{
        -: 1061:                    //No Card to Reveal
        -: 1062:                    if (DEBUG){
        -: 1063:                        printf("No cards to reveal\n");
        -: 1064:                    }
        -: 1065:                }
        -: 1066:            }
        -: 1067:            
        -: 1068:            else{
    #####: 1069:                if (state->deckCount[nextPlayer] == 0){
    #####: 1070:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1071:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1072:                        state->deckCount[nextPlayer]++;
    #####: 1073:                        state->discard[nextPlayer][i] = -1;
    #####: 1074:                        state->discardCount[nextPlayer]--;
        -: 1075:                    }
        -: 1076:                    
    #####: 1077:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1078:                }
    #####: 1079:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:                state->deckCount[nextPlayer]--;
    #####: 1082:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:                state->deckCount[nextPlayer]--;
        -: 1085:            }
        -: 1086:            
    #####: 1087:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1088:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1089:                state->playedCardCount++;
    #####: 1090:                tributeRevealedCards[1] = -1;
        -: 1091:            }
        -: 1092:            
    #####: 1093:            for (i = 0; i <= 2; i ++){
    #####: 1094:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1095:                    state->coins += 2;
        -: 1096:                }
        -: 1097:                
    #####: 1098:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1099:                    drawCard(currentPlayer, state);
    #####: 1100:                    drawCard(currentPlayer, state);
        -: 1101:                }
        -: 1102:                else{//Action Card
    #####: 1103:                    state->numActions = state->numActions + 2;
        -: 1104:                }
        -: 1105:            }
        -: 1106:            
    #####: 1107:            return 0;
        -: 1108:            
        -: 1109:        case ambassador:
    #####: 1110:            j = 0;		//used to check if player has enough cards to discard
        -: 1111:            
    #####: 1112:            if (choice2 > 2 || choice2 < 0)
        -: 1113:            {
    #####: 1114:                return -1;
        -: 1115:            }
        -: 1116:            
    #####: 1117:            if (choice1 == handPos)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:            
    #####: 1122:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:            {
    #####: 1124:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1125:                {
    #####: 1126:                    j++;
        -: 1127:                }
        -: 1128:            }
    #####: 1129:            if (j < choice2)
        -: 1130:            {
    #####: 1131:                return -1;				
        -: 1132:            }
        -: 1133:            
        -: 1134:            if (DEBUG) 
        -: 1135:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1136:            
        -: 1137:            //increase supply count for choosen card by amount being discarded
    #####: 1138:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1139:            
        -: 1140:            //each other player gains a copy of revealed card
    #####: 1141:            for (i = 0; i < state->numPlayers; i++)
        -: 1142:            {
    #####: 1143:                if (i != currentPlayer)
        -: 1144:                {
    #####: 1145:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1146:                }
        -: 1147:            }
        -: 1148:            
        -: 1149:            //discard played card from hand
    #####: 1150:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1151:            
        -: 1152:            //trash copies of cards returned to supply
    #####: 1153:            for (j = 0; j < choice2; j++)
        -: 1154:            {
    #####: 1155:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1156:                {
    #####: 1157:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1158:                    {
    #####: 1159:                        discardCard(i, currentPlayer, state, 1);
    #####: 1160:                        break;
        -: 1161:                    }
        -: 1162:                }
        -: 1163:            }			
        -: 1164:            
    #####: 1165:            return 0;
        -: 1166:            
        -: 1167:        case cutpurse:
        -: 1168:            
    #####: 1169:            updateCoins(currentPlayer, state, 2);
    #####: 1170:            for (i = 0; i < state->numPlayers; i++)
        -: 1171:            {
    #####: 1172:                if (i != currentPlayer)
        -: 1173:                {
    #####: 1174:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1175:                    {
    #####: 1176:                        if (state->hand[i][j] == copper)
        -: 1177:                        {
    #####: 1178:                            discardCard(j, i, state, 0);
    #####: 1179:                            break;
        -: 1180:                        }
    #####: 1181:                        if (j == state->handCount[i])
        -: 1182:                        {
    #####: 1183:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1184:                            {
        -: 1185:                                if (DEBUG)
        -: 1186:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1187:                            }	
    #####: 1188:                            break;
        -: 1189:                        }		
        -: 1190:                    }
        -: 1191:                    
        -: 1192:                }
        -: 1193:                
        -: 1194:            }				
        -: 1195:            
        -: 1196:            //discard played card from hand
    #####: 1197:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1198:            
    #####: 1199:            return 0;
        -: 1200:            
        -: 1201:            
        -: 1202:        case embargo:
        -: 1203:            //+2 Coins
    #####: 1204:            state->coins = state->coins + 2;
        -: 1205:            
        -: 1206:            //see if selected pile is in play
    #####: 1207:            if ( state->supplyCount[choice1] == -1 )
        -: 1208:            {
    #####: 1209:                return -1;
        -: 1210:            }
        -: 1211:            
        -: 1212:            //add embargo token to selected supply pile
    #####: 1213:            state->embargoTokens[choice1]++;
        -: 1214:            
        -: 1215:            //trash card
    #####: 1216:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1217:            return 0;
        -: 1218:            
        -: 1219:        case outpost:
        -: 1220:            //set outpost flag
    #####: 1221:            state->outpostPlayed++;
        -: 1222:            
        -: 1223:            //discard card
    #####: 1224:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1225:            return 0;
        -: 1226:            
        -: 1227:        case salvager:
        -: 1228:            //+1 buy
    #####: 1229:            state->numBuys++;
        -: 1230:            
    #####: 1231:            if (choice1)
        -: 1232:            {
        -: 1233:                //gain coins equal to trashed card
    #####: 1234:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1235:                //trash card
    #####: 1236:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1237:            }
        -: 1238:            
        -: 1239:            //discard card
    #####: 1240:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1241:            return 0;
        -: 1242:            
        -: 1243:        case sea_hag:
    #####: 1244:            for (i = 0; i < state->numPlayers; i++){
    #####: 1245:                if (i != currentPlayer){
    #####: 1246:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1247:                    state->discardCount[i]++;
    #####: 1248:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1249:                }
        -: 1250:            }
    #####: 1251:            return 0;
        -: 1252:            
        -: 1253:        case treasure_map:
        -: 1254:            //search hand for another treasure_map
    #####: 1255:            index = -1;
    #####: 1256:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1257:            {
    #####: 1258:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1259:                {
    #####: 1260:                    index = i;
    #####: 1261:                    break;
        -: 1262:                }
        -: 1263:            }
    #####: 1264:            if (index > -1)
        -: 1265:            {
        -: 1266:                //trash both treasure cards
    #####: 1267:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1268:                discardCard(index, currentPlayer, state, 1);
        -: 1269:                
        -: 1270:                //gain 4 Gold cards
    #####: 1271:                for (i = 0; i < 4; i++)
        -: 1272:                {
    #####: 1273:                    gainCard(gold, state, 1, currentPlayer);
        -: 1274:                }
        -: 1275:                
        -: 1276:                //return success
    #####: 1277:                return 1;
        -: 1278:            }
        -: 1279:            
        -: 1280:            //no second treasure_map found in hand
    #####: 1281:            return -1;
        -: 1282:    }
        -: 1283:    
    #####: 1284:    return -1;
        -: 1285:}
        -: 1286:
     1100: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:    
        -: 1290:    //if card is not trashed, added to Played pile 
     1100: 1291:    if (trashFlag < 1)
        -: 1292:    {
        -: 1293:        //add card to played pile
     1100: 1294:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1100: 1295:        state->playedCardCount++;
        -: 1296:    }
        -: 1297:    
        -: 1298:    //set played card to -1
     1100: 1299:    state->hand[currentPlayer][handPos] = -1;
        -: 1300:    
        -: 1301:    //remove card from player's hand
     1100: 1302:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:        //reduce number of cards in hand
    #####: 1305:        state->handCount[currentPlayer]--;
        -: 1306:    }
     1100: 1307:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:        //reduce number of cards in hand
    #####: 1310:        state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:    else 	
        -: 1313:    {
        -: 1314:        //replace discarded card with last card in hand
     1100: 1315:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:        //set last card to -1
     1100: 1317:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:        //reduce number of cards in hand
     1100: 1319:        state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:    
     1100: 1322:    return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:    //Note: supplyPos is enum of choosen card
        -: 1328:    
        -: 1329:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:        return -1;
        -: 1333:    }
        -: 1334:    
        -: 1335:    //added card for [whoseTurn] current player:
        -: 1336:    // toFlag = 0 : add to discard
        -: 1337:    // toFlag = 1 : add to deck
        -: 1338:    // toFlag = 2 : add to hand
        -: 1339:    
    #####: 1340:    if (toFlag == 1)
        -: 1341:    {
    #####: 1342:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:        state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:    else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:        state->handCount[player]++;
        -: 1349:    }
        -: 1350:    else
        -: 1351:    {
    #####: 1352:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:        state->discardCount[player]++;
        -: 1354:    }
        -: 1355:    
        -: 1356:    //decrease number in supply pile
    #####: 1357:    state->supplyCount[supplyPos]--;
        -: 1358:    
    #####: 1359:    return 0;
        -: 1360:}
        -: 1361:
     1200: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:    int i;
        -: 1365:    
        -: 1366:    //reset coin count
     1200: 1367:    state->coins = 0;
        -: 1368:    
        -: 1369:    //add coins for each Treasure card in player's hand
     7200: 1370:    for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
     6000: 1372:        if (state->hand[player][i] == copper)
        -: 1373:        {
     4686: 1374:            state->coins += 1;
        -: 1375:        }
     1314: 1376:        else if (state->hand[player][i] == silver)
        -: 1377:        {
    #####: 1378:            state->coins += 2;
        -: 1379:        }
     1314: 1380:        else if (state->hand[player][i] == gold)
        -: 1381:        {
    #####: 1382:            state->coins += 3;
        -: 1383:        }	
        -: 1384:    }	
        -: 1385:    
        -: 1386:    //add bonus
     1200: 1387:    state->coins += bonus;
        -: 1388:    
     1200: 1389:    return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
